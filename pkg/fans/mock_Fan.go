// Code generated by mockery. DO NOT EDIT.

package fans

import mock "github.com/stretchr/testify/mock"

// MockFan is an autogenerated mock type for the Fan type
type MockFan struct {
	mock.Mock
}

type MockFan_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFan) EXPECT() *MockFan_Expecter {
	return &MockFan_Expecter{mock: &_m.Mock}
}

// Control provides a mock function with given fields:
func (_m *MockFan) Control() (ControlMode, error) {
	ret := _m.Called()

	var r0 ControlMode
	var r1 error
	if rf, ok := ret.Get(0).(func() (ControlMode, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() ControlMode); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ControlMode)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFan_Control_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Control'
type MockFan_Control_Call struct {
	*mock.Call
}

// Control is a helper method to define mock.On call
func (_e *MockFan_Expecter) Control() *MockFan_Control_Call {
	return &MockFan_Control_Call{Call: _e.mock.On("Control")}
}

func (_c *MockFan_Control_Call) Run(run func()) *MockFan_Control_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFan_Control_Call) Return(_a0 ControlMode, _a1 error) *MockFan_Control_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFan_Control_Call) RunAndReturn(run func() (ControlMode, error)) *MockFan_Control_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockFan) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockFan_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockFan_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockFan_Expecter) Name() *MockFan_Name_Call {
	return &MockFan_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockFan_Name_Call) Run(run func()) *MockFan_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFan_Name_Call) Return(_a0 string) *MockFan_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFan_Name_Call) RunAndReturn(run func() string) *MockFan_Name_Call {
	_c.Call.Return(run)
	return _c
}

// SetSpeed provides a mock function with given fields: percentage
func (_m *MockFan) SetSpeed(percentage uint8) error {
	ret := _m.Called(percentage)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint8) error); ok {
		r0 = rf(percentage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFan_SetSpeed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSpeed'
type MockFan_SetSpeed_Call struct {
	*mock.Call
}

// SetSpeed is a helper method to define mock.On call
//   - percentage uint8
func (_e *MockFan_Expecter) SetSpeed(percentage interface{}) *MockFan_SetSpeed_Call {
	return &MockFan_SetSpeed_Call{Call: _e.mock.On("SetSpeed", percentage)}
}

func (_c *MockFan_SetSpeed_Call) Run(run func(percentage uint8)) *MockFan_SetSpeed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint8))
	})
	return _c
}

func (_c *MockFan_SetSpeed_Call) Return(_a0 error) *MockFan_SetSpeed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFan_SetSpeed_Call) RunAndReturn(run func(uint8) error) *MockFan_SetSpeed_Call {
	_c.Call.Return(run)
	return _c
}

// Speed provides a mock function with given fields:
func (_m *MockFan) Speed() (uint8, error) {
	ret := _m.Called()

	var r0 uint8
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint8, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint8); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint8)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFan_Speed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Speed'
type MockFan_Speed_Call struct {
	*mock.Call
}

// Speed is a helper method to define mock.On call
func (_e *MockFan_Expecter) Speed() *MockFan_Speed_Call {
	return &MockFan_Speed_Call{Call: _e.mock.On("Speed")}
}

func (_c *MockFan_Speed_Call) Run(run func()) *MockFan_Speed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFan_Speed_Call) Return(_a0 uint8, _a1 error) *MockFan_Speed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFan_Speed_Call) RunAndReturn(run func() (uint8, error)) *MockFan_Speed_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields:
func (_m *MockFan) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockFan_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type MockFan_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *MockFan_Expecter) String() *MockFan_String_Call {
	return &MockFan_String_Call{Call: _e.mock.On("String")}
}

func (_c *MockFan_String_Call) Run(run func()) *MockFan_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFan_String_Call) Return(_a0 string) *MockFan_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFan_String_Call) RunAndReturn(run func() string) *MockFan_String_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFan creates a new instance of MockFan. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFan(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFan {
	mock := &MockFan{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
