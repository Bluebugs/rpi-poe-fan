// Code generated by mockery. DO NOT EDIT.

package cpu

import mock "github.com/stretchr/testify/mock"

// MockTemp is an autogenerated mock type for the Temp type
type MockTemp struct {
	mock.Mock
}

type MockTemp_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTemp) EXPECT() *MockTemp_Expecter {
	return &MockTemp_Expecter{mock: &_m.Mock}
}

// Read provides a mock function with given fields:
func (_m *MockTemp) Read() (float32, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 float32
	var r1 error
	if rf, ok := ret.Get(0).(func() (float32, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() float32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float32)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTemp_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockTemp_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
func (_e *MockTemp_Expecter) Read() *MockTemp_Read_Call {
	return &MockTemp_Read_Call{Call: _e.mock.On("Read")}
}

func (_c *MockTemp_Read_Call) Run(run func()) *MockTemp_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTemp_Read_Call) Return(_a0 float32, _a1 error) *MockTemp_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTemp_Read_Call) RunAndReturn(run func() (float32, error)) *MockTemp_Read_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTemp creates a new instance of MockTemp. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTemp(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTemp {
	mock := &MockTemp{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
