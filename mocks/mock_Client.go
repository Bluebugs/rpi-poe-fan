// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mqtt "github.com/eclipse/paho.mqtt.golang"
	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// AddRoute provides a mock function with given fields: topic, callback
func (_m *MockClient) AddRoute(topic string, callback mqtt.MessageHandler) {
	_m.Called(topic, callback)
}

// MockClient_AddRoute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRoute'
type MockClient_AddRoute_Call struct {
	*mock.Call
}

// AddRoute is a helper method to define mock.On call
//   - topic string
//   - callback mqtt.MessageHandler
func (_e *MockClient_Expecter) AddRoute(topic interface{}, callback interface{}) *MockClient_AddRoute_Call {
	return &MockClient_AddRoute_Call{Call: _e.mock.On("AddRoute", topic, callback)}
}

func (_c *MockClient_AddRoute_Call) Run(run func(topic string, callback mqtt.MessageHandler)) *MockClient_AddRoute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(mqtt.MessageHandler))
	})
	return _c
}

func (_c *MockClient_AddRoute_Call) Return() *MockClient_AddRoute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClient_AddRoute_Call) RunAndReturn(run func(string, mqtt.MessageHandler)) *MockClient_AddRoute_Call {
	_c.Call.Return(run)
	return _c
}

// Connect provides a mock function with given fields:
func (_m *MockClient) Connect() mqtt.Token {
	ret := _m.Called()

	var r0 mqtt.Token
	if rf, ok := ret.Get(0).(func() mqtt.Token); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mqtt.Token)
		}
	}

	return r0
}

// MockClient_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type MockClient_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
func (_e *MockClient_Expecter) Connect() *MockClient_Connect_Call {
	return &MockClient_Connect_Call{Call: _e.mock.On("Connect")}
}

func (_c *MockClient_Connect_Call) Run(run func()) *MockClient_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_Connect_Call) Return(_a0 mqtt.Token) *MockClient_Connect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Connect_Call) RunAndReturn(run func() mqtt.Token) *MockClient_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// Disconnect provides a mock function with given fields: quiesce
func (_m *MockClient) Disconnect(quiesce uint) {
	_m.Called(quiesce)
}

// MockClient_Disconnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disconnect'
type MockClient_Disconnect_Call struct {
	*mock.Call
}

// Disconnect is a helper method to define mock.On call
//   - quiesce uint
func (_e *MockClient_Expecter) Disconnect(quiesce interface{}) *MockClient_Disconnect_Call {
	return &MockClient_Disconnect_Call{Call: _e.mock.On("Disconnect", quiesce)}
}

func (_c *MockClient_Disconnect_Call) Run(run func(quiesce uint)) *MockClient_Disconnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockClient_Disconnect_Call) Return() *MockClient_Disconnect_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClient_Disconnect_Call) RunAndReturn(run func(uint)) *MockClient_Disconnect_Call {
	_c.Call.Return(run)
	return _c
}

// IsConnected provides a mock function with given fields:
func (_m *MockClient) IsConnected() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockClient_IsConnected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsConnected'
type MockClient_IsConnected_Call struct {
	*mock.Call
}

// IsConnected is a helper method to define mock.On call
func (_e *MockClient_Expecter) IsConnected() *MockClient_IsConnected_Call {
	return &MockClient_IsConnected_Call{Call: _e.mock.On("IsConnected")}
}

func (_c *MockClient_IsConnected_Call) Run(run func()) *MockClient_IsConnected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_IsConnected_Call) Return(_a0 bool) *MockClient_IsConnected_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_IsConnected_Call) RunAndReturn(run func() bool) *MockClient_IsConnected_Call {
	_c.Call.Return(run)
	return _c
}

// IsConnectionOpen provides a mock function with given fields:
func (_m *MockClient) IsConnectionOpen() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockClient_IsConnectionOpen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsConnectionOpen'
type MockClient_IsConnectionOpen_Call struct {
	*mock.Call
}

// IsConnectionOpen is a helper method to define mock.On call
func (_e *MockClient_Expecter) IsConnectionOpen() *MockClient_IsConnectionOpen_Call {
	return &MockClient_IsConnectionOpen_Call{Call: _e.mock.On("IsConnectionOpen")}
}

func (_c *MockClient_IsConnectionOpen_Call) Run(run func()) *MockClient_IsConnectionOpen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_IsConnectionOpen_Call) Return(_a0 bool) *MockClient_IsConnectionOpen_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_IsConnectionOpen_Call) RunAndReturn(run func() bool) *MockClient_IsConnectionOpen_Call {
	_c.Call.Return(run)
	return _c
}

// OptionsReader provides a mock function with given fields:
func (_m *MockClient) OptionsReader() mqtt.ClientOptionsReader {
	ret := _m.Called()

	var r0 mqtt.ClientOptionsReader
	if rf, ok := ret.Get(0).(func() mqtt.ClientOptionsReader); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(mqtt.ClientOptionsReader)
	}

	return r0
}

// MockClient_OptionsReader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OptionsReader'
type MockClient_OptionsReader_Call struct {
	*mock.Call
}

// OptionsReader is a helper method to define mock.On call
func (_e *MockClient_Expecter) OptionsReader() *MockClient_OptionsReader_Call {
	return &MockClient_OptionsReader_Call{Call: _e.mock.On("OptionsReader")}
}

func (_c *MockClient_OptionsReader_Call) Run(run func()) *MockClient_OptionsReader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_OptionsReader_Call) Return(_a0 mqtt.ClientOptionsReader) *MockClient_OptionsReader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_OptionsReader_Call) RunAndReturn(run func() mqtt.ClientOptionsReader) *MockClient_OptionsReader_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: topic, qos, retained, payload
func (_m *MockClient) Publish(topic string, qos byte, retained bool, payload interface{}) mqtt.Token {
	ret := _m.Called(topic, qos, retained, payload)

	var r0 mqtt.Token
	if rf, ok := ret.Get(0).(func(string, byte, bool, interface{}) mqtt.Token); ok {
		r0 = rf(topic, qos, retained, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mqtt.Token)
		}
	}

	return r0
}

// MockClient_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockClient_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - topic string
//   - qos byte
//   - retained bool
//   - payload interface{}
func (_e *MockClient_Expecter) Publish(topic interface{}, qos interface{}, retained interface{}, payload interface{}) *MockClient_Publish_Call {
	return &MockClient_Publish_Call{Call: _e.mock.On("Publish", topic, qos, retained, payload)}
}

func (_c *MockClient_Publish_Call) Run(run func(topic string, qos byte, retained bool, payload interface{})) *MockClient_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(byte), args[2].(bool), args[3].(interface{}))
	})
	return _c
}

func (_c *MockClient_Publish_Call) Return(_a0 mqtt.Token) *MockClient_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Publish_Call) RunAndReturn(run func(string, byte, bool, interface{}) mqtt.Token) *MockClient_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: topic, qos, callback
func (_m *MockClient) Subscribe(topic string, qos byte, callback mqtt.MessageHandler) mqtt.Token {
	ret := _m.Called(topic, qos, callback)

	var r0 mqtt.Token
	if rf, ok := ret.Get(0).(func(string, byte, mqtt.MessageHandler) mqtt.Token); ok {
		r0 = rf(topic, qos, callback)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mqtt.Token)
		}
	}

	return r0
}

// MockClient_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockClient_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - topic string
//   - qos byte
//   - callback mqtt.MessageHandler
func (_e *MockClient_Expecter) Subscribe(topic interface{}, qos interface{}, callback interface{}) *MockClient_Subscribe_Call {
	return &MockClient_Subscribe_Call{Call: _e.mock.On("Subscribe", topic, qos, callback)}
}

func (_c *MockClient_Subscribe_Call) Run(run func(topic string, qos byte, callback mqtt.MessageHandler)) *MockClient_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(byte), args[2].(mqtt.MessageHandler))
	})
	return _c
}

func (_c *MockClient_Subscribe_Call) Return(_a0 mqtt.Token) *MockClient_Subscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Subscribe_Call) RunAndReturn(run func(string, byte, mqtt.MessageHandler) mqtt.Token) *MockClient_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeMultiple provides a mock function with given fields: filters, callback
func (_m *MockClient) SubscribeMultiple(filters map[string]byte, callback mqtt.MessageHandler) mqtt.Token {
	ret := _m.Called(filters, callback)

	var r0 mqtt.Token
	if rf, ok := ret.Get(0).(func(map[string]byte, mqtt.MessageHandler) mqtt.Token); ok {
		r0 = rf(filters, callback)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mqtt.Token)
		}
	}

	return r0
}

// MockClient_SubscribeMultiple_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeMultiple'
type MockClient_SubscribeMultiple_Call struct {
	*mock.Call
}

// SubscribeMultiple is a helper method to define mock.On call
//   - filters map[string]byte
//   - callback mqtt.MessageHandler
func (_e *MockClient_Expecter) SubscribeMultiple(filters interface{}, callback interface{}) *MockClient_SubscribeMultiple_Call {
	return &MockClient_SubscribeMultiple_Call{Call: _e.mock.On("SubscribeMultiple", filters, callback)}
}

func (_c *MockClient_SubscribeMultiple_Call) Run(run func(filters map[string]byte, callback mqtt.MessageHandler)) *MockClient_SubscribeMultiple_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]byte), args[1].(mqtt.MessageHandler))
	})
	return _c
}

func (_c *MockClient_SubscribeMultiple_Call) Return(_a0 mqtt.Token) *MockClient_SubscribeMultiple_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_SubscribeMultiple_Call) RunAndReturn(run func(map[string]byte, mqtt.MessageHandler) mqtt.Token) *MockClient_SubscribeMultiple_Call {
	_c.Call.Return(run)
	return _c
}

// Unsubscribe provides a mock function with given fields: topics
func (_m *MockClient) Unsubscribe(topics ...string) mqtt.Token {
	_va := make([]interface{}, len(topics))
	for _i := range topics {
		_va[_i] = topics[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 mqtt.Token
	if rf, ok := ret.Get(0).(func(...string) mqtt.Token); ok {
		r0 = rf(topics...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mqtt.Token)
		}
	}

	return r0
}

// MockClient_Unsubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unsubscribe'
type MockClient_Unsubscribe_Call struct {
	*mock.Call
}

// Unsubscribe is a helper method to define mock.On call
//   - topics ...string
func (_e *MockClient_Expecter) Unsubscribe(topics ...interface{}) *MockClient_Unsubscribe_Call {
	return &MockClient_Unsubscribe_Call{Call: _e.mock.On("Unsubscribe",
		append([]interface{}{}, topics...)...)}
}

func (_c *MockClient_Unsubscribe_Call) Run(run func(topics ...string)) *MockClient_Unsubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockClient_Unsubscribe_Call) Return(_a0 mqtt.Token) *MockClient_Unsubscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Unsubscribe_Call) RunAndReturn(run func(...string) mqtt.Token) *MockClient_Unsubscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
